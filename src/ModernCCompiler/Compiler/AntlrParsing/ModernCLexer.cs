//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/LocalFiles/ModernC/src/ModernCCompiler/Compiler/AntlrParsing/ModernC.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ModernCLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, VOID_TYPE=26, INT_TYPE=27, BOOL_TYPE=28, TRUE=29, FALSE=30, 
		INT=31, ID=32, WHITESPACE=33, NEWLINE=34;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"VOID_TYPE", "INT_TYPE", "BOOL_TYPE", "TRUE", "FALSE", "INT", "ID", "WHITESPACE", 
		"NEWLINE"
	};


	public ModernCLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ModernCLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "','", "'func'", "'{'", "'}'", "'print'", "';'", "'='", 
		"'if'", "'elif'", "'else'", "'return'", "'or'", "'and'", "'=='", "'<'", 
		"'<='", "'>'", "'>='", "'+'", "'-'", "'*'", "'/'", "'not'", "'void'", 
		"'int'", "'bool'", "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "VOID_TYPE", "INT_TYPE", "BOOL_TYPE", "TRUE", "FALSE", "INT", 
		"ID", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ModernC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ModernCLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,34,201,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,1,0,1,0,1,1,1,1,
		1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,
		7,1,7,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
		1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,
		1,14,1,15,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,19,
		1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,24,1,25,1,25,
		1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,28,1,28,
		1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,30,4,30,173,8,30,11,30,
		12,30,174,1,31,1,31,5,31,179,8,31,10,31,12,31,182,9,31,1,32,4,32,185,8,
		32,11,32,12,32,186,1,32,1,32,1,33,3,33,192,8,33,1,33,1,33,4,33,196,8,33,
		11,33,12,33,197,1,33,1,33,0,0,34,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
		9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
		21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
		33,67,34,1,0,4,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
		97,122,2,0,9,9,32,32,206,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,
		0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
		1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
		0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
		1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
		0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
		1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,1,69,1,0,0,0,3,71,1,0,0,0,5,73,1,0,0,
		0,7,75,1,0,0,0,9,80,1,0,0,0,11,82,1,0,0,0,13,84,1,0,0,0,15,90,1,0,0,0,
		17,92,1,0,0,0,19,94,1,0,0,0,21,97,1,0,0,0,23,102,1,0,0,0,25,107,1,0,0,
		0,27,114,1,0,0,0,29,117,1,0,0,0,31,121,1,0,0,0,33,124,1,0,0,0,35,126,1,
		0,0,0,37,129,1,0,0,0,39,131,1,0,0,0,41,134,1,0,0,0,43,136,1,0,0,0,45,138,
		1,0,0,0,47,140,1,0,0,0,49,142,1,0,0,0,51,146,1,0,0,0,53,151,1,0,0,0,55,
		155,1,0,0,0,57,160,1,0,0,0,59,165,1,0,0,0,61,172,1,0,0,0,63,176,1,0,0,
		0,65,184,1,0,0,0,67,195,1,0,0,0,69,70,5,40,0,0,70,2,1,0,0,0,71,72,5,41,
		0,0,72,4,1,0,0,0,73,74,5,44,0,0,74,6,1,0,0,0,75,76,5,102,0,0,76,77,5,117,
		0,0,77,78,5,110,0,0,78,79,5,99,0,0,79,8,1,0,0,0,80,81,5,123,0,0,81,10,
		1,0,0,0,82,83,5,125,0,0,83,12,1,0,0,0,84,85,5,112,0,0,85,86,5,114,0,0,
		86,87,5,105,0,0,87,88,5,110,0,0,88,89,5,116,0,0,89,14,1,0,0,0,90,91,5,
		59,0,0,91,16,1,0,0,0,92,93,5,61,0,0,93,18,1,0,0,0,94,95,5,105,0,0,95,96,
		5,102,0,0,96,20,1,0,0,0,97,98,5,101,0,0,98,99,5,108,0,0,99,100,5,105,0,
		0,100,101,5,102,0,0,101,22,1,0,0,0,102,103,5,101,0,0,103,104,5,108,0,0,
		104,105,5,115,0,0,105,106,5,101,0,0,106,24,1,0,0,0,107,108,5,114,0,0,108,
		109,5,101,0,0,109,110,5,116,0,0,110,111,5,117,0,0,111,112,5,114,0,0,112,
		113,5,110,0,0,113,26,1,0,0,0,114,115,5,111,0,0,115,116,5,114,0,0,116,28,
		1,0,0,0,117,118,5,97,0,0,118,119,5,110,0,0,119,120,5,100,0,0,120,30,1,
		0,0,0,121,122,5,61,0,0,122,123,5,61,0,0,123,32,1,0,0,0,124,125,5,60,0,
		0,125,34,1,0,0,0,126,127,5,60,0,0,127,128,5,61,0,0,128,36,1,0,0,0,129,
		130,5,62,0,0,130,38,1,0,0,0,131,132,5,62,0,0,132,133,5,61,0,0,133,40,1,
		0,0,0,134,135,5,43,0,0,135,42,1,0,0,0,136,137,5,45,0,0,137,44,1,0,0,0,
		138,139,5,42,0,0,139,46,1,0,0,0,140,141,5,47,0,0,141,48,1,0,0,0,142,143,
		5,110,0,0,143,144,5,111,0,0,144,145,5,116,0,0,145,50,1,0,0,0,146,147,5,
		118,0,0,147,148,5,111,0,0,148,149,5,105,0,0,149,150,5,100,0,0,150,52,1,
		0,0,0,151,152,5,105,0,0,152,153,5,110,0,0,153,154,5,116,0,0,154,54,1,0,
		0,0,155,156,5,98,0,0,156,157,5,111,0,0,157,158,5,111,0,0,158,159,5,108,
		0,0,159,56,1,0,0,0,160,161,5,116,0,0,161,162,5,114,0,0,162,163,5,117,0,
		0,163,164,5,101,0,0,164,58,1,0,0,0,165,166,5,102,0,0,166,167,5,97,0,0,
		167,168,5,108,0,0,168,169,5,115,0,0,169,170,5,101,0,0,170,60,1,0,0,0,171,
		173,7,0,0,0,172,171,1,0,0,0,173,174,1,0,0,0,174,172,1,0,0,0,174,175,1,
		0,0,0,175,62,1,0,0,0,176,180,7,1,0,0,177,179,7,2,0,0,178,177,1,0,0,0,179,
		182,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,0,181,64,1,0,0,0,182,180,1,0,
		0,0,183,185,7,3,0,0,184,183,1,0,0,0,185,186,1,0,0,0,186,184,1,0,0,0,186,
		187,1,0,0,0,187,188,1,0,0,0,188,189,6,32,0,0,189,66,1,0,0,0,190,192,5,
		13,0,0,191,190,1,0,0,0,191,192,1,0,0,0,192,193,1,0,0,0,193,196,5,10,0,
		0,194,196,5,13,0,0,195,191,1,0,0,0,195,194,1,0,0,0,196,197,1,0,0,0,197,
		195,1,0,0,0,197,198,1,0,0,0,198,199,1,0,0,0,199,200,6,33,0,0,200,68,1,
		0,0,0,7,0,174,180,186,191,195,197,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
