//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/LocalFiles/ModernC/src/ModernCCompiler/Compiler/AntlrParsing/ModernC.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class ModernCLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, VOID_TYPE=17, 
		INT_TYPE=18, BOOL_TYPE=19, TRUE=20, FALSE=21, INT=22, ID=23, WHITESPACE=24, 
		NEWLINE=25;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "VOID_TYPE", 
		"INT_TYPE", "BOOL_TYPE", "TRUE", "FALSE", "INT", "ID", "WHITESPACE", "NEWLINE"
	};


	public ModernCLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ModernCLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'('", "')'", "','", "'{'", "'}'", "'print'", "';'", "'='", "'return'", 
		"'+'", "'-'", "'or'", "'*'", "'/'", "'and'", "'not'", "'void'", "'int'", 
		"'bool'", "'true'", "'false'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "VOID_TYPE", "INT_TYPE", "BOOL_TYPE", "TRUE", 
		"FALSE", "INT", "ID", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "ModernC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ModernCLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,25,152,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
		1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,
		8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,14,
		1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,
		1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
		1,20,1,20,1,21,4,21,124,8,21,11,21,12,21,125,1,22,1,22,5,22,130,8,22,10,
		22,12,22,133,9,22,1,23,4,23,136,8,23,11,23,12,23,137,1,23,1,23,1,24,3,
		24,143,8,24,1,24,1,24,4,24,147,8,24,11,24,12,24,148,1,24,1,24,0,0,25,1,
		1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
		15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,1,0,4,1,
		0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,2,0,9,9,32,
		32,157,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
		1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
		0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
		0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,1,51,1,0,0,0,3,53,1,0,0,0,5,55,
		1,0,0,0,7,57,1,0,0,0,9,59,1,0,0,0,11,61,1,0,0,0,13,67,1,0,0,0,15,69,1,
		0,0,0,17,71,1,0,0,0,19,78,1,0,0,0,21,80,1,0,0,0,23,82,1,0,0,0,25,85,1,
		0,0,0,27,87,1,0,0,0,29,89,1,0,0,0,31,93,1,0,0,0,33,97,1,0,0,0,35,102,1,
		0,0,0,37,106,1,0,0,0,39,111,1,0,0,0,41,116,1,0,0,0,43,123,1,0,0,0,45,127,
		1,0,0,0,47,135,1,0,0,0,49,146,1,0,0,0,51,52,5,40,0,0,52,2,1,0,0,0,53,54,
		5,41,0,0,54,4,1,0,0,0,55,56,5,44,0,0,56,6,1,0,0,0,57,58,5,123,0,0,58,8,
		1,0,0,0,59,60,5,125,0,0,60,10,1,0,0,0,61,62,5,112,0,0,62,63,5,114,0,0,
		63,64,5,105,0,0,64,65,5,110,0,0,65,66,5,116,0,0,66,12,1,0,0,0,67,68,5,
		59,0,0,68,14,1,0,0,0,69,70,5,61,0,0,70,16,1,0,0,0,71,72,5,114,0,0,72,73,
		5,101,0,0,73,74,5,116,0,0,74,75,5,117,0,0,75,76,5,114,0,0,76,77,5,110,
		0,0,77,18,1,0,0,0,78,79,5,43,0,0,79,20,1,0,0,0,80,81,5,45,0,0,81,22,1,
		0,0,0,82,83,5,111,0,0,83,84,5,114,0,0,84,24,1,0,0,0,85,86,5,42,0,0,86,
		26,1,0,0,0,87,88,5,47,0,0,88,28,1,0,0,0,89,90,5,97,0,0,90,91,5,110,0,0,
		91,92,5,100,0,0,92,30,1,0,0,0,93,94,5,110,0,0,94,95,5,111,0,0,95,96,5,
		116,0,0,96,32,1,0,0,0,97,98,5,118,0,0,98,99,5,111,0,0,99,100,5,105,0,0,
		100,101,5,100,0,0,101,34,1,0,0,0,102,103,5,105,0,0,103,104,5,110,0,0,104,
		105,5,116,0,0,105,36,1,0,0,0,106,107,5,98,0,0,107,108,5,111,0,0,108,109,
		5,111,0,0,109,110,5,108,0,0,110,38,1,0,0,0,111,112,5,116,0,0,112,113,5,
		114,0,0,113,114,5,117,0,0,114,115,5,101,0,0,115,40,1,0,0,0,116,117,5,102,
		0,0,117,118,5,97,0,0,118,119,5,108,0,0,119,120,5,115,0,0,120,121,5,101,
		0,0,121,42,1,0,0,0,122,124,7,0,0,0,123,122,1,0,0,0,124,125,1,0,0,0,125,
		123,1,0,0,0,125,126,1,0,0,0,126,44,1,0,0,0,127,131,7,1,0,0,128,130,7,2,
		0,0,129,128,1,0,0,0,130,133,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,
		46,1,0,0,0,133,131,1,0,0,0,134,136,7,3,0,0,135,134,1,0,0,0,136,137,1,0,
		0,0,137,135,1,0,0,0,137,138,1,0,0,0,138,139,1,0,0,0,139,140,6,23,0,0,140,
		48,1,0,0,0,141,143,5,13,0,0,142,141,1,0,0,0,142,143,1,0,0,0,143,144,1,
		0,0,0,144,147,5,10,0,0,145,147,5,13,0,0,146,142,1,0,0,0,146,145,1,0,0,
		0,147,148,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,150,1,0,0,0,150,
		151,6,24,0,0,151,50,1,0,0,0,7,0,125,131,137,142,146,148,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
